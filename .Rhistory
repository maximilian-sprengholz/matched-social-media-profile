'
- Define combination rules to keep short (makes only sense within categories)
- Omit categories without matches
- CAUTION: Also refers to matchvarparams, but the variable names are
prefixed with "match_" (matched values) or "match_profileheader" (can
contain unmatched values, displayed in profile header). These prefixes
have to be stripped when used as keys! (see below)
'
# use template document in /src
template <- paste(readLines(paste0(wd,"/src/profile_template.html")))
# file to be written
output_file <- file(path_file)
### gather header content
'
- Initials:
- Hard coded!
- If missing: use random character
'
content_header <- ""
# initials
content_header <- paste(
content_header,
"<h1",
ifelse(!is.na(df_match_row$match_profileheader_initials),
df_match_row$match_profileheader_initials,
sample(LETTERS, 1)),
"</h1>",
sep="\n")
# other header info
header_set <- lapply(
keepunmatchedinfo[!keepunmatchedinfo %in% "initials"],
function(x) paste0("match_profileheader_", x)
)
header_set_keys <- keepunmatchedinfo[!keepunmatchedinfo %in% "initials"]
header_print <- mapply(
function(e, key) {
value <- df_match_row[e]
printer <- matchvarparams$get(key)$get("print")
printer(value=value, header=TRUE)
},
unlist(header_set),
unlist(header_set_keys)
)
content_header <- paste(
content_header,
paste(header_print, collapse=", "),
sep="\n"
)
# content_header <- paste(
#     content_header,
#     paste(df_match_row[1, unlist(header_set)], collapse=", "),
#     sep="\n"
#     )
### gather main content (exclude what is in header)
'
- Makes use of specific print functions given in matchvarparams. These
functions can be extended at will to accomodate specific combinations, etc.
'
content_main <- ""
# content_set <- colnames(df_match_row)[
#     !grepl(paste(keepunmatchedinfo, collapse="|"), colnames(df_match_row))
#     ]
# for (matchvar in colnames(match_info)) {
#     printer <- matchvarparams$get(matchvar)$get("print")
#     content_header <- paste(
#         content_header,
#         printer(
#             df=df_match_row,
#             value=df_match_row[paste0(matchvarprefix, matchvar)]
#             ))
#message(matchvarparams$get(matchvar)$get("group")$label)
# }
### insert into template and write everything
content <- gsub("--HEADER--", content_header, template)
content <- gsub("--MAIN--", content_main, content)
writeLines(content, output_file)
close(output_file)
}
### RUN ###
test <- exporter(
df=df_merged,
path_dir=paste0(wd,"/profiles/"), # where to store profiles
keepunmatchedinfo=c("initials", "gender", "age", "currentstate") # used in header
)
test
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
################################################################################
#
#   EXPORT SOCIAL MEDIA PROFILES
#
################################################################################
### FUNCTIONS ###
exporter <- function(
df,
idcol="lfdn", # person id, numeric
path_dir,
keepunmatchedinfo=c("age", "initials", "gender", "currentstate") # vector of variables displayed in header even if unmatched
) {
'
- Wrapper function
- Input: df input, multiple rows with matches per person
- Output: vector with profile urls matching passed df length
'
# Step 1: keep best(?) matches for each person
'
What is the approach here? Also very different persons? Then the selection
rule should be which.min() and the matcher needs to return the values of all
variables irrespective of being matched or not.
'
df_match_best <- df %>%
group_by_at(idcol) %>% slice(which.max(match_simscore))
# for each person and match, export match profile and add file name/url to df
matched_set <- colnames(df_match_best)[grepl("match_", colnames(df_match_best))]
df_match_best <- df_match_best[,c(idcol, matched_set)]
df_match_best <- df_match_best %>%
pmap_df(function(...) {
df_match_row <- tibble(...) # info to use
path_file <- paste0(path_dir, df_match_row[1,idcol], ".html")
export_values(df_match_row, path_file)
return(list(profile_url = path_file)) # return url
})
}
export_values <- function(df_match_row, path_file) {
'
- Define combination rules to keep short (makes only sense within categories)
- Omit categories without matches
- CAUTION: Also refers to matchvarparams, but the variable names are
prefixed with "match_" (matched values) or "match_profileheader" (can
contain unmatched values, displayed in profile header). These prefixes
have to be stripped when used as keys! (see below)
'
# use template document in /src
template <- paste(readLines(paste0(wd,"/src/profile_template.html")))
# file to be written
output_file <- file(path_file)
### gather header content
'
- Initials:
- Hard coded!
- If missing: use random character
'
content_header <- ""
# initials
content_header <- paste(
content_header,
"<h1>",
ifelse(!is.na(df_match_row$match_profileheader_initials),
df_match_row$match_profileheader_initials,
sample(LETTERS, 1)),
"</h1>",
sep="\n")
# other header info
header_set <- lapply(
keepunmatchedinfo[!keepunmatchedinfo %in% "initials"],
function(x) paste0("match_profileheader_", x)
)
header_set_keys <- keepunmatchedinfo[!keepunmatchedinfo %in% "initials"]
header_print <- mapply(
function(e, key) {
value <- df_match_row[e]
printer <- matchvarparams$get(key)$get("print")
printer(value=value, header=TRUE)
},
unlist(header_set),
unlist(header_set_keys)
)
content_header <- paste(
content_header,
paste(header_print, collapse=", "),
sep="\n"
)
# content_header <- paste(
#     content_header,
#     paste(df_match_row[1, unlist(header_set)], collapse=", "),
#     sep="\n"
#     )
### gather main content (exclude what is in header)
'
- Makes use of specific print functions given in matchvarparams. These
functions can be extended at will to accomodate specific combinations, etc.
'
content_main <- ""
# content_set <- colnames(df_match_row)[
#     !grepl(paste(keepunmatchedinfo, collapse="|"), colnames(df_match_row))
#     ]
# for (matchvar in colnames(match_info)) {
#     printer <- matchvarparams$get(matchvar)$get("print")
#     content_header <- paste(
#         content_header,
#         printer(
#             df=df_match_row,
#             value=df_match_row[paste0(matchvarprefix, matchvar)]
#             ))
#message(matchvarparams$get(matchvar)$get("group")$label)
# }
### insert into template and write everything
content <- gsub("--HEADER--", content_header, template)
content <- gsub("--MAIN--", content_main, content)
writeLines(content, output_file)
close(output_file)
}
### RUN ###
test <- exporter(
df=df_merged,
path_dir=paste0(wd,"/profiles/"), # where to store profiles
keepunmatchedinfo=c("initials", "gender", "age", "currentstate") # used in header
)
test
# parameters fpr match and export
source("src/02_matchvarparams.R")
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
install.packages(plyr)
install.packages("plyr")
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
# install.packages("plyr")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
library(plyr)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
################################################################################
#
#   MASTER
#
################################################################################
### packages
# install.packages("R6")
# install.packages("tidyverse")
# install.packages("stringdist")
# install.packages("collections")
library(R6)
library(tidyverse)
library(stringdist)
library(collections)
### definitions
set.seed(42)
`%!in%` <- Negate(`%in%`)
wd <- 'C:/Users/sprenmax/Seafile/projects/matched-social-media-profile'
setwd(wd)
### run
# sample data
df <- read.csv(paste(wd, "testdata.csv", sep="/"), fileEncoding = "UTF-8")
df <- df[1:5,]
# clean
source("src/01_clean.R")
# parameters fpr match and export
source("src/02_matchvarparams.R")
# match
source("src/03_match.R")
# export profiles
